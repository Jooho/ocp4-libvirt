#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------
 
#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2
 
    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon
 
    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats
 
    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM
 
#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  tcplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000
 
listen ingress-http
    bind *:80
    mode tcp
    option tcplog
    option tcp-check
{% for worker in range(worker_nodes) %}
    server worker-{{ loop.index - 1 }} worker-{{ loop.index - 1 }}.{{ cluster_name }}.{{ network_domain }}:80 check
{% endfor %}
 
listen ingress-https
    bind *:443
    mode tcp
    option tcplog
    option tcp-check
{% for worker in range(worker_nodes) %}
    server worker-{{ loop.index - 1 }} worker-{{ loop.index - 1 }}.{{ cluster_name }}.{{ network_domain }}:443 check
{% endfor %}
 
listen api
    bind *:6443
    mode tcp
    option tcplog
    option tcp-check
    server bootstrap bootstrap.{{ cluster_name }}.{{ network_domain }}:6443 check
{% for master in range(master_nodes) %}
    server master-{{ loop.index - 1 }} master-{{ loop.index - 1 }}.{{ cluster_name }}.{{ network_domain }}:6443 check
{% endfor %}
 
listen machine-config-server
    bind *:22623
    mode tcp
    option tcplog
    option tcp-check
    server bootstrap bootstrap.{{ cluster_name }}.{{ network_domain }}:22623 check
{% for master in range(master_nodes) %}
    server master-{{ loop.index - 1 }} master-{{ loop.index - 1 }}.{{ cluster_name }}.{{ network_domain }}:22623 check
{% endfor %}


